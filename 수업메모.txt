-> DBConfig.java에 작성

1) config.properties 내용을 읽어와
	HikariConfig Bean 등록
	
2) HikariConfig Bean을 이용해서
  	DataSource(Java DBCP 사용을 위한 인터페이스) Bean 등록

3) DataSoruce Bean을 이용해서
   DataSourceTransactionManager Bean 등록
   (DBCP을 이용해서 SQL 수행 시 트랜잭션을 처리를 관리) 
   
4) DataSoruce + mapper파일 + mybatis-config.xml을 이용해
	SqlSessionFactory Bean 등록
	-> SqlSession: DB연결 + SQL파일 위치등록 + 마이바티스 설정 적용 + 클래스 별칭 등록
	
5) SqlSessionFacty 이용해
	SqlSessionTemplate Bean 등록
	-> DB연결 + 마이바티스 기능 사용
		+ Spring 제공 트랜잭션 관련 어노테이션 사용 가능


/===========================================================/


@RequestParam 
 - 요청 시 제출된 데이터(쿼리스트링, input)를 얻어와
   매개변수에 저장하는 어노테이션
   
@RequestMapping
 - 요청 주소에 따라서
   알맞은 컨트롤러 클래스/메서드에 연결하는 어노테이션

@RequestBody
 - 비동기 요청 시 body에 담겨져 전달되는 데이터를
   매개변수에 저장하는 어노테이션

@ResponseBody
 - 비동기 요청 코드(응답 본문)에
   컨트롤러 반환 값을 그대로 전달하는 어노테이션


/===========================================================/


탈퇴 / 삭제 처리
*DELETE 아님!!!

1) 상태 값 변경
- 탈퇴여부 N -> Y 변경
- 기존테이블에 누적되는 문제 발생

2) 기존데이터 -> 탈퇴/삭제 테이블 이동
- 이동 후 기존 데이터를 쓰레기값으로 변경
- 탈퇴 이후에도 작성한 게시글, 데이터 등의 기록을 남겨두기 위해


/===========================================================/


js파일은 하나만 만들어서 html파일에 다 가져다 쓰는데

myPage.js:30 Uncaught TypeError: Cannot read properties of null (reading 'addEventListener')
여러 페이지에서 다쓰니까 나는 오류

[해결1 : 있을때만 만들으라고 함]
if(document.querySelector("#findAddressBtn") !== null){ ... }

[해결2 : 안전탐색연산자 사용]
객체?.속성
=> ? : 안전 탐색 연산자
			객체가 null 또는 undefined가 아니면 수행

/===========================================================/

예외처리
- 예외가 발생하면 프로그램이 정지하는데
  프로그램의 비정상 종료를 막기 위해 예외처리를 실행함

- throws : 메서드에서 발생한 예외를 호출부로 던짐
- try-catch : try 안에서 예외를 catch에서 잡아서 처리

* 기본적으로 SPRING에서 발생하는 대부분의 예외를
	한번에 처리하여 에러페이지로 넘어가게 하는 Error Controller를 제공함

[목표]
 1. 예외 처리 범위를 확장
  - Controller 범위	(@ExceptionHandler)
  -      전역				(@ControllerAdvice + ErrorController상속)

 2. 예외처리 페이지 변경
  - 별도의 설정 없이 templates/error/응답코드.html 파일만 있어도
	  스프링에 내장된 ErrorControoler가 발생하는 응답코드와 같은 html 파일로 foward함